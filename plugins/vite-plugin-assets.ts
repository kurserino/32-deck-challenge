import { Plugin } from 'vite';
import fs from 'fs';
import path from 'path';

const ROOT_DIR = process.cwd();
const ASSETS_DIR = path.resolve(ROOT_DIR, './src/assets');
const TYPES_DIR = path.resolve(ROOT_DIR, './src/types');

const getAutoGeneratedHeader = () => `/**
* This file is auto-generated by Vite.
* Do not edit manually. Changes may be overwritten.
*/\n`;

const formatAssetName = (fileName: string): string => {
  let formattedName = fileName.replace(/\.[^.]+$/, '');
  formattedName = formattedName.replace(/-([a-z])/g, (_, match) =>
    match.toUpperCase()
  );
  return formattedName;
};

const parseAsset = (file: { name: string }) => {
  return {
    name: formatAssetName(file.name),
    fileName: file.name,
  };
};

const generateBarrelFile = () => {
  const assets = fs
    .readdirSync(ASSETS_DIR, { withFileTypes: true })
    .filter((file) => file.isFile() && !file.name.endsWith('.ts'))
    .map((file) => parseAsset(file));

  let output = getAutoGeneratedHeader();
  output += assets
    .map(
      (asset) =>
        `export { default as ${asset.name} } from './${asset.fileName}';`
    )
    .join('\n');

  const barrelPath = path.resolve(ASSETS_DIR, './index.ts');
  fs.writeFileSync(barrelPath, output);
};

const generateTypes = () => {
  const assets = fs
    .readdirSync(ASSETS_DIR, { withFileTypes: true })
    .filter((file) => file.isFile() && !file.name.endsWith('.ts'))
    .map((file) => formatAssetName(file.name));

  const svgAssets = JSON.stringify(assets, null, 2);
  let output = getAutoGeneratedHeader();
  output += `const assets = ${svgAssets} as const;\n`;
  output += `export type Assets = Record<typeof assets[number], string>;`;
  const typesPath = path.resolve(TYPES_DIR, './assets.ts');
  fs.writeFileSync(typesPath, output);
};

const handleAssetsChange = (file: string) => {
  const isAssetFile = file.includes('src/assets');
  if (isAssetFile) {
    generateBarrelFile();
    generateTypes();
  }
};

const vitePluginGenerateAssetsTypes = (): Plugin => {
  return {
    name: 'vite-plugin-assets',
    configureServer({ watcher }) {
      watcher.on('add', handleAssetsChange);
      watcher.on('change', handleAssetsChange);
      watcher.on('unlink', handleAssetsChange);
    },
    buildStart() {
      generateBarrelFile();
      generateTypes();
    },
  };
};

export default vitePluginGenerateAssetsTypes;
